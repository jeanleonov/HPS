options{  JDK_VERSION = "1.7";  IGNORE_CASE = true;  STATIC = false;}PARSER_BEGIN(Parser)package utils.parser;import java.util.List;import java.util.LinkedList;import distribution.GenotypeAgeCountTrio;import distribution.ZoneDistribution;import experiment.scenario.Action;import experiment.scenario.repeaters.ActionRepeat;import experiment.scenario.repeaters.CyclicRepeat;import experiment.scenario.repeaters.ProbabilisticRepeat;import experiment.scenario.Rule;import experiment.scenario.repeaters.SingleRepeat;import experiment.scenario.ZoneCommand;import experiment.individual.genotype.Genotype;import statistic.StatisticSettings;import statistic.StatisticSettings.Subiteration;

public class Parser{    public List<Rule> readRules() throws Exception {		return ruleList();    }    public StatisticSettings readStatisticSettings() throws Exception {        return statisticSettings();    }}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < EVERY : "every" >| < FROM : "from" >| < TO : "to" >| < IN : "in" >| < WITH_POSSIBILITY : "with-possibility" >| < FOR : "for" >| < EACH : "each" >//| < ADD_CAPACITY : "add-capacity" >     // TODO + IMPROVE| < IMMIGRATION : "immigration" >| < ABSOLUTE : "absolute" >//| < RELATIVE : "relative" >               // TODO + IMPROVE| < GENOTYPE : (<GENDER><SPECIES>|"("<GENDER><SPECIES>")"){2} >| < RULE_END : ";" >| < #SPECIES : "L" | "R" >| < #GENDER : "X" | "Y" >//| < NORMAL_DISTRIBUTED : /**/ >| < NUMBER : ("0" | (["1"-"9"] (<DIGIT>)*)) ("." (<DIGIT>)+)? >| < #DIGIT : ["0"-"9"] >| < AGES : "ages" >| < GENOTYPES : "genotypes" >| < WITH_IMMATURES : "with_immatures" >| < WITHOUT_IMMATURES : "without_immatures" >| < AFTER_MOVE_AND_SCENARIO : "after_move_and_scenario" >| < AFTER_EVOLUTION : "after_evolution" >| < AFTER_REPRODACTION : "after_reprodaction" >| < AFTER_COMPETITION : "after_competition" >| < AFTER_DIEING : "after_dieing" >| < AFTER_EACH : "after_each" >}//=======================| RULE LIST List<Rule> ruleList() throws Exception :   {List<Rule> rules = new LinkedList<Rule>();    Rule curRule;}{//>>>>>>>>-------------------------    (curRule = rule()        {rules.add(curRule);}     <RULE_END>    )*    {return rules;}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| RULE 
Rule rule() throws Exception :    {Rule rule;    ActionRepeat actionRepeat;    List<Action> actions;    int from = Rule.FOREVER_BEFORE,        to = Rule.FOREVER_AFTER;    Token token;}{//>>>>>>>>-------------------------  ( <IN> token=<NUMBER> 	    {from = Integer.parseInt(token.image);	     actionRepeat = 	     new SingleRepeat(from);	     to = from;}  |( <EVERY> token=<NUMBER> 	      {actionRepeat = 	      new CyclicRepeat(Float.parseFloat(token.image));}    | <WITH_POSSIBILITY> token=<NUMBER> 	      {actionRepeat = 	      new ProbabilisticRepeat(Float.parseFloat(token.image));}   )   (<FROM> token=<NUMBER>        {from=Integer.parseInt(token.image);}   )?   (<TO> token=<NUMBER>        {to=Integer.parseInt(token.image);}   )?  )  actions = actionList()  {return new Rule(actionRepeat, actions, from, to);}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| ACTION LISTList<Action> actionList() throws Exception :   {List<Action> actions = new LinkedList<Action>();    Action curAction;}{//>>>>>>>>-------------------------    (curAction = action()         {actions.add(curAction);}    )+    {return actions;}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| ACTIONAction action() throws Exception :   {Action action;   List<Integer> zones = new LinkedList<Integer>();   ZoneDistribution zoneDistribution = new ZoneDistribution();   ZoneCommand command;   Token tokenG, tokenA, tokenN, token;}{//------------------------------------------    <FOR>    ((token = <NUMBER>          {zones.add(Integer.parseInt(token.image));}     )+    |<EACH>    )    (<IMMIGRATION>     (tokenG=<GENOTYPE> tokenA=<NUMBER> tokenN=<NUMBER>          {zoneDistribution.addGenotypeDistribution(                                new GenotypeAgeCountTrio(                                        Genotype.getGenotype(tokenG.image),                                        Integer.parseInt(tokenA.image),                                        Integer.parseInt(tokenN.image)));}       (",")?     )+    //| <ADD_CAPACITY>    )    {return new Action(                    zones,                     new ZoneCommand(                                ZoneCommand.Type.ADD_INDIVIDUALS,                                zoneDistribution));}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| STATISTIC SETTINGS StatisticSettings statisticSettings() throws Exception :   {StatisticSettings settings = new StatisticSettings();}{//>>>>>>>>-------------------------    (		  <AGES> {settings.setShouldDistinguishAges(true);}		| <GENOTYPES> {settings.setShouldDistinguishAges(false);}		| <WITH_IMMATURES> {settings.setShouldDisplayImmatures(true);}		| <WITHOUT_IMMATURES> {settings.setShouldDisplayImmatures(false);}		| <AFTER_MOVE_AND_SCENARIO> {settings.addReportingSubiteration(Subiteration.AFTER_MOVE_AND_SCENARIO);}		| <AFTER_EVOLUTION> {settings.addReportingSubiteration(Subiteration.AFTER_EVOLUTION);}		| <AFTER_REPRODACTION> {settings.addReportingSubiteration(Subiteration.AFTER_REPRODACTION);}		| <AFTER_COMPETITION> {settings.addReportingSubiteration(Subiteration.AFTER_COMPETITION);}		| <AFTER_DIEING> {settings.addReportingSubiteration(Subiteration.AFTER_DIEING);}		| <AFTER_EACH> {settings.reportAfterEachSubiteration();}    )*    {return settings;}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^