options{  JDK_VERSION = "1.7";  IGNORE_CASE = true;  static = true;}PARSER_BEGIN(Parser)package parser;import java.util.Vector;import distribution.GenotypeAgeCountTrio;import distribution.ZoneDistribution;import experiment.Action;import experiment.ActionAppearance;import experiment.CyclicAppearance;import experiment.ProbabilisticAppearance;import experiment.Rule;import experiment.SingleAppearance;import experiment.ZoneCommand;import genotype.Genotype;

public class Parser{    public Vector<Rule> readRules(){      try{	       return ruleList();	  }	  catch(Exception e){	       e.printStackTrace();	  }	  return null;    }}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < EVERY : "every" >| < FROM : "from" >| < TO : "to" >| < IN : "in" >| < WITH_POSSIBILITY : "with possibility" >| < FOR : "for" >| < EACH : "each" >//| < ADD_RESOURCES : "add resources" >     // TODO + IMPROVE| < IMMIGRATION : "immigration" >| < ABSOLUTE : "absolute" >//| < RELATIVE : "relative" >               // TODO + IMPROVE| < GENOTYPE : (<GENDER><SPECIES>|"("<GENDER><SPECIES>")"){2} >| < RULE_END : ";" >| < #SPECIES : "L" | "R" >| < #GENDER : "X" | "Y" >//| < NORMAL_DISTRIBUTED : /**/ >| < NUMBER : ("0" | (["1"-"9"] (<DIGIT>)*)) ("." (<DIGIT>)+)? >| < #DIGIT : ["0"-"9"] >}//=======================| RULE LIST Vector<Rule> ruleList() :   {Vector<Rule> rules = new Vector<Rule>();    Rule curRule;}{//>>>>>>>>-------------------------    (curRule = rule()        {rules.add(curRule);}     <RULE_END>    )*    {return rules;}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| RULE 
Rule rule() :    {Rule rule;    ActionAppearance actionAppearance;    Vector<Action> actions;    int from = Rule.FOREVER_BEFORE,        to = Rule.FOREVER_AFTER;    Token token;}{//>>>>>>>>-------------------------  ( <IN> token=<NUMBER> 	    {from = Integer.parseInt(token.image);	     actionAppearance = 	     new SingleAppearance(from);	     to = from;}  |( <EVERY> token=<NUMBER> 	      {actionAppearance = 	      new CyclicAppearance(Float.parseFloat(token.image));}    | <WITH_POSSIBILITY> token=<NUMBER> 	      {actionAppearance = 	      new ProbabilisticAppearance(Float.parseFloat(token.image));}   )   (<FROM> token=<NUMBER>        {from=Integer.parseInt(token.image);}   )?   (<TO> token=<NUMBER>        {to=Integer.parseInt(token.image);}   )?  )  actions = actionList()  {return new Rule(actionAppearance, actions, from, to);}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| ACTION LISTVector<Action> actionList() :   {Vector<Action> actions = new Vector<Action>();    Action curAction;}{//>>>>>>>>-------------------------    (curAction = action()         {actions.add(curAction);}    )+    {return actions;}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^//=======================| ACTIONAction action() :   {Action action;   Vector<Integer> zones = new Vector<Integer>();   ZoneDistribution zoneDistribution = new ZoneDistribution();   ZoneCommand command;   Token tokenG, tokenA, tokenN, token;}{//------------------------------------------    <FOR>    ((token = <NUMBER>          {zones.add(Integer.parseInt(token.image));}     )+    |<EACH>    )    (<IMMIGRATION>     (tokenG=<GENOTYPE> tokenA=<NUMBER> tokenN=<NUMBER>          {zoneDistribution.addGenotypeDistribution(                                new GenotypeAgeCountTrio(                                        Genotype.getGenotype(tokenG.image),                                        Integer.parseInt(tokenA.image),                                        Integer.parseInt(tokenN.image)));}       (",")?     )+    //| <ADD_RESOURCES>    )    {return new Action(                    zones,                     new ZoneCommand(                                ZoneCommand.Type.ADD_INDIVIDUALS,                                zoneDistribution));}}//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^